#!/bin/bash

# File path for the .env file
ENV_FILE=".env"

# Check if the .env file exists
if [[ ! -f "$ENV_FILE" ]]; then
    echo "Error: $ENV_FILE not found."
    exit 1
fi

# Function to read the .env file into an array
read_env_file() {
    declare -gA env_vars
    while IFS="=" read -r key value; do
        # Skip empty lines and comments
        [[ -z "$key" || "$key" =~ ^# ]] && continue
        env_vars["$key"]="$value"
    done <"$ENV_FILE"
}

# Function to create a dialog form string
create_form() {
    local form=()
    for key in "${!env_vars[@]}"; do
        form+=("$key" "${env_vars[$key]}" 1)
    done
    echo "${form[@]}"
}

# Function to update the .env file with user changes
write_env_file() {
    >"$ENV_FILE"
    for key in "${!env_vars[@]}"; do
        echo "$key=${env_vars[$key]}" >>"$ENV_FILE"
    done
}

# Read the .env file
read_env_file

# Generate the form string
form_data=$(create_form)

# Show the dialog form
output=$(dialog \
    --form "Edit .env Variables" \
    20 80 15 \
    ${form_data[@]} 2>&1 >/dev/tty)

# Check if the user canceled
if [[ $? -ne 0 ]]; then
    echo "Operation canceled."
    exit 1
fi

# Parse the output and update the variables
IFS=$'\n' read -rd '' -a output_lines <<<"$output"
index=0
for key in "${!env_vars[@]}"; do
    env_vars["$key"]="${output_lines[$index]}"
    ((index++))
done

# Write back the changes to the .env file
write_env_file

# Notify the user
echo "Changes saved to $ENV_FILE."
